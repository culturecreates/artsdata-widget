{"version":3,"sources":["FeatureRow.js","FeatureTable.js","TabLink.js","App.js","serviceWorker.js","index.js"],"names":["FeatureRow","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","key","props","name","nameCell","React","Component","Row","FeatureTable","_this","refreshServicesFromWD","method","setState","refreshing","url","URL","params","query","sparql_query","format","promise","keys","forEach","searchParams","append","fetch","urlParams","URLSearchParams","mode","cache","headers","Content-Type","body","then","result","json","services","results","bindings","map","entry","datasetLabel","value","catch","error","console","log","openAddServiceDialog","showAddServiceDialog","closeAddServiceDialog","state","_this2","Fragment","Table_default","striped","bordered","hover","row","FeatureRow_FeatureRow","Button_default","onClick","className","disabled","Modal_default","show","onHide","Header","closeButton","Title","Body","href","sparqlQueryUrl","encodeURIComponent","TabLink","_ref","to","title","exact","useRouteMatch","path","role","react_router_dom","TableTab","style","FeatureTable_FeatureTable","App","selectedEndpoint","servicesMap","openTab","servicesList","margin","float","react_router","children","_ref2","match","display","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89c1cb37.chunk.js","sourcesContent":["\nimport React from 'react';\n\nexport default class FeatureRow extends React.Component {\n   constructor() {\n      super();\n     \n   }\n\n\n   nameCell() {\n      let parts = [\n        <span key='name'>{this.props.name}</span>\n      ];\n    \n      return parts;\n   }\n\n\n   render() {\n      return (\n        <tr>\n            <td>{this.nameCell()}</td>\n        </tr>);\n   }\n}\n\n","import React from 'react';\nimport Table from 'react-bootstrap/lib/Table';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport Button from 'react-bootstrap/lib/Button';\nimport FeatureRow from './FeatureRow.js';\n\nclass Row {\n    constructor(name) {\n       this.name = name;\n    }\n}\n\n\nexport default class FeatureTable extends React.Component {\n    constructor() {\n      super();\n       this.state = {\n         services: [],\n         showAddServiceDialog: false,\n         refreshing: false,\n       };\n\n       this.sparql_query = (\n        \"SELECT ?datasetLabel WHERE {\\n\" +\n        \"     wd:Q114171774 wdt:P527 ?dataset .\\n\"+\n        \"  SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE],en\\\". }\\n\" +\n        \"}\\n\" +\n        \"ORDER BY DESC(?datasetLabel)\\n\");\n    }\n\n    refreshServicesFromWD = (method) => {\n       this.setState({\n         refreshing: true\n       });\n       let url = new URL(\"https://query.wikidata.org/sparql\");\n       let params = {query:this.sparql_query, format: 'json'};\n       let promise = null;\n       if (method === 'GET') {\n         Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n         promise = fetch(url);\n       } else {\n         var urlParams = new URLSearchParams();\n         Object.keys(params).forEach(key => urlParams.append(key, params[key]));\n         promise = fetch(url, {\n           method: 'POST',\n           mode: 'cors',\n           cache: 'no-cache',\n           headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n           body: urlParams,\n         });\n       }\n\n       promise\n        .then(result => result.json())\n        .then(result =>\n            this.setState({\n              services: result.results.bindings.map(entry =>\n                new Row(entry.datasetLabel.value)),\n              refreshing: false\n           })\n        )\n        .catch(error => {\n           console.log(error);\n           this.setState({ refreshing: false });\n        });\n    }\n\n    componentDidMount() {\n       this.refreshServicesFromWD('GET');\n    }\n\n\n    openAddServiceDialog = () => {\n        this.setState({\n           showAddServiceDialog: true\n        });\n    }\n\n    closeAddServiceDialog = () => {\n        this.setState({\n           showAddServiceDialog: false\n        });\n    }\n\n    get sparqlQueryUrl() {\n        return 'https://query.wikidata.org/#'+encodeURIComponent(this.sparql_query);\n    }\n\n    render() {\n      return (\n        <>\n        <Table striped bordered hover>\n           <thead>\n             <tr>\n               <td>Name</td>\n             \n             </tr>\n           </thead>\n           <tbody>\n              {this.state.services.map(\n                row => <FeatureRow\n                        name={row.name}\n                        />)\n               }\n           </tbody>\n        </Table>\n        <Button onClick={this.openAddServiceDialog}><span className=\"glyphicon glyphicon-plus\"></span> Add a dataset</Button>&nbsp;&nbsp;&nbsp;\n        <Button onClick={() => this.refreshServicesFromWD('POST')} disabled={this.state.refreshing}><span className=\"glyphicon glyphicon-refresh\"></span> {this.state.refreshing ? 'Refreshing…' : 'Refresh table'}</Button>\n\n        <Modal show={this.state.showAddServiceDialog} onHide={this.closeAddServiceDialog}>\n          <Modal.Header closeButton>\n            <Modal.Title>How to add a dataset to this list</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n               This list is generated by <a href={this.sparqlQueryUrl}>a SPARQL query on Wikidata</a>.\n               To add your service to it, follow these steps:\n            </p>\n            <ul>\n                  <li>Add a statement 'has part' to the LDFI Data Catalog that points to your dataset.\n                  </li>\n                <li>Refresh this table - it might take a few minutes before your service appears in the table.</li>\n            </ul>\n          </Modal.Body>\n        </Modal>\n        </>\n      );\n   }\n}\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nexport default function TabLink({ to, title, exact }) {\n     const isActive = useRouteMatch({path: to, exact: exact});\n     const className = isActive ? 'active' : '';\n\n     return (\n        <li role=\"presentation\" className={className}>\n            <Link to={to}>\n                {title}\n            </Link>\n        </li>);\n}\n\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\nimport FeatureTable from './FeatureTable.js';\nimport TabLink from './TabLink.js';\n\nimport { HashRouter, Route } from \"react-router-dom\";\n\n\nfunction TableTab({style }) {\n\n   return (<div className=\"tabContent\" style={style}>\n        <p>This table lists stats from Wikidata\n        </p>\n         <FeatureTable> \n                  </FeatureTable>\n    </div>);\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedEndpoint: '',\n      servicesMap: {},\n      openTab: 'servicesList',\n      refreshing: false,\n      servicesList: []\n    };\n  }\n\n  render() {\n    return (\n    <HashRouter>\n      <div className=\"App\" style={{margin: '20px'}}>\n        <h1>Artsdata Widget</h1>\n        <p style={{float: 'right'}}><a href=\"https://github.com/culturecreates/artsdata-widget\">Source repository</a></p>\n        <ul className=\"nav nav-tabs\">\n            <TabLink to=\"/\" title=\"Statistics\" exact=\"true\" />\n            <TabLink to=\"/client/\" title=\"More\" />\n        </ul>\n        <Route exact path=\"/\" children={({ match }) =>\n          <TableTab  style={{display: match ? 'block' : 'none'}} />} />\n      </div>\n    </HashRouter>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}