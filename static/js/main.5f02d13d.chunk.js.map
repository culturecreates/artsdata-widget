{"version":3,"sources":["FeatureRow.js","FeatureTable.js","TabLink.js","App.js","serviceWorker.js","index.js"],"names":["FeatureRow","react_default","a","createElement","key","this","props","datasetLabel","href","dataset","nameCell","typeLabel","count","React","Component","Row","Object","classCallCheck","FeatureTable","_this","possibleConstructorReturn","getPrototypeOf","call","refreshServicesFromWD","method","setState","refreshing","url","URL","params","query","sparql_query","format","promise","keys","forEach","searchParams","append","fetch","urlParams","URLSearchParams","mode","cache","headers","Content-Type","body","then","result","json","services","results","bindings","map","entry","value","catch","error","console","log","openAddServiceDialog","showAddServiceDialog","closeAddServiceDialog","state","_this2","Fragment","Table_default","striped","bordered","hover","row","FeatureRow_FeatureRow","Button_default","onClick","disabled","className","Modal_default","show","onHide","Header","closeButton","Title","Body","sparqlQueryUrl","encodeURIComponent","TabLink","_ref","to","title","exact","useRouteMatch","path","role","react_router_dom","TableTab","style","FeatureTable_FeatureTable","CalendarTab","_ref2","App","selectedEndpoint","servicesMap","openTab","servicesList","margin","float","react_router","children","_ref3","match","display","_ref4","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f02d13d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class FeatureRow extends React.Component {\n  nameCell() {\n    let parts = [<span key=\"name\">{this.props.datasetLabel}</span>];\n    return parts;\n  }\n\n  render() {\n    return (\n      <tr>\n        <td><a href={this.props.dataset}>{this.nameCell()}</a></td>\n        <td>{this.props.typeLabel}</td>\n        <td>{this.props.count}</td>\n      </tr>\n    );\n  }\n}\n","import React from \"react\";\nimport Table from \"react-bootstrap/lib/Table\";\nimport Modal from \"react-bootstrap/lib/Modal\";\nimport Button from \"react-bootstrap/lib/Button\";\nimport FeatureRow from \"./FeatureRow.js\";\n\nclass Row {\n  constructor(dataset, datasetLabel, count, typeLabel) {\n    this.dataset = dataset;\n    this.datasetLabel = datasetLabel;\n    this.count = count;\n    this.typeLabel = typeLabel;\n  }\n}\n\nexport default class FeatureTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      services: [],\n      showAddServiceDialog: false,\n      refreshing: false,\n    };\n\n    this.sparql_query =\n      \"SELECT  distinct ?dataset ?datasetLabel (count(distinct ?item) as ?count)  ?typeLabel WHERE {\\n\" +\n      \"  wd:Q114171774 wdt:P527 ?dataset .\\n\" +\n      \"  optional {  ?item  ?someProperty [ prov:wasDerivedFrom [ pr:P248 ?dataset ] ] ;   wdt:P31/wdt:P279* ?type .\\n\" +\n      \"  filter( ?type = wd:Q43229 || ?type = wd:Q5 || ?type = wd:Q17350442 || ?type = wd:Q17538722 ) }\\n\" +\n      '  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\\n' +\n      \"}\\n\" +\n      \"group by  ?dataset ?datasetLabel ?typeLabel \" +\n      \"ORDER BY ?datasetLabel\\n\";\n  }\n\n  refreshServicesFromWD = (method) => {\n    this.setState({\n      refreshing: true,\n    });\n    let url = new URL(\"https://query.wikidata.org/sparql\");\n    let params = { query: this.sparql_query, format: \"json\" };\n    let promise = null;\n    if (method === \"GET\") {\n      Object.keys(params).forEach((key) =>\n        url.searchParams.append(key, params[key])\n      );\n      promise = fetch(url);\n    } else {\n      var urlParams = new URLSearchParams();\n      Object.keys(params).forEach((key) => urlParams.append(key, params[key]));\n      promise = fetch(url, {\n        method: \"POST\",\n        mode: \"cors\",\n        cache: \"no-cache\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: urlParams,\n      });\n    }\n\n    promise\n      .then((result) => result.json())\n      .then((result) =>\n        this.setState({\n          services: result.results.bindings.map(\n            (entry) =>\n              new Row(\n                entry.dataset.value,\n                entry.datasetLabel.value,\n                entry.count.value,\n                entry.typeLabel.value\n              )\n          ),\n\n          refreshing: false,\n        })\n      )\n      .catch((error) => {\n        console.log(error);\n        this.setState({ refreshing: false });\n      });\n  };\n\n  componentDidMount() {\n    this.refreshServicesFromWD(\"GET\");\n  }\n\n  openAddServiceDialog = () => {\n    this.setState({\n      showAddServiceDialog: true,\n    });\n  };\n\n  closeAddServiceDialog = () => {\n    this.setState({\n      showAddServiceDialog: false,\n    });\n  };\n\n  get sparqlQueryUrl() {\n    return (\n      \"https://query.wikidata.org/#\" + encodeURIComponent(this.sparql_query)\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <td>Dataset</td>\n              <td>General Type</td>\n              <td>Entities Enriched</td>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.services.map((row) => (\n              <FeatureRow\n                dataset={row.dataset}\n                datasetLabel={row.datasetLabel}\n                typeLabel={row.typeLabel}\n                count={row.count}\n              />\n            ))}\n          </tbody>\n        </Table>\n        <Button\n          onClick={() => this.refreshServicesFromWD(\"POST\")}\n          disabled={this.state.refreshing}\n        >\n          <span className=\"glyphicon glyphicon-refresh\"></span>{\" \"}\n          {this.state.refreshing\n            ? \"Refreshing… may take up to 1 minute\"\n            : \"Refresh table\"}\n        </Button>\n        &nbsp;&nbsp;&nbsp;\n        <Button onClick={this.openAddServiceDialog}>\n          <span className=\"glyphicon glyphicon-plus\"></span> Add a dataset\n        </Button>\n        <Modal\n          show={this.state.showAddServiceDialog}\n          onHide={this.closeAddServiceDialog}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>How to add a dataset to this list</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>\n              This list is generated by a{\" \"}\n              <a href={this.sparqlQueryUrl}>SPARQL query on Wikidata</a>. To\n              add your dataset follow these steps:\n            </p>\n            <ul>\n            <li>\n              Ensure that your contributions have a reference statement 'stated in (P248)' that points to your dataset.\n              </li>\n              <li>\n                Ensure that your dataset is a subclass of 'data set (Q1172284)' </li> \n              <li>\n                Add a statement 'has part' to the{\" \"}\n                <a href=\"https://www.wikidata.org/wiki/Q114171774\">\n                  LDFI Data Catalog\n                </a>{\" \"}\n                that points to your dataset.\n              </li>\n              <li>\n                Refresh this table - it might take a few minutes before your\n                dataset appears in the table.\n              </li>\n            </ul>\n          </Modal.Body>\n        </Modal>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom';\n\nexport default function TabLink({ to, title, exact }) {\n     const isActive = useRouteMatch({path: to, exact: exact});\n     const className = isActive ? 'active' : '';\n\n     return (\n        <li role=\"presentation\" className={className}>\n            <Link to={to}>\n                {title}\n            </Link>\n        </li>);\n}\n\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./style.css\";\nimport FeatureTable from \"./FeatureTable.js\";\nimport TabLink from \"./TabLink.js\";\n\nimport { HashRouter, Route } from \"react-router-dom\";\n\nfunction TableTab({ style }) {\n  return (\n    <div className=\"tabContent\" style={style}>\n      <h3>LDFI Contributions to Wikidata</h3>\n      <p>\n        This table lists datasets participating in the{\" \"}\n        <a href=\"https://www.wikidata.org/wiki/Q114171774\">LDFI Data Catalog</a>\n        {\" \"}along with the number of Wikidata entities they enriched. Statements added to an entity must have the reference 'stated in (P248)' in order to be included in this table. \n      </p>\n      <FeatureTable />\n    </div>\n  );\n}\n\nfunction CalendarTab({ style }) {\n  return (\n    <div className=\"tabContent\" style={style}>\n      <h3>Calendar</h3>\n       \n    </div>\n  );\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedEndpoint: \"\",\n      servicesMap: {},\n      openTab: \"servicesList\",\n      refreshing: false,\n      servicesList: [],\n    };\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\" style={{ margin: \"20px\" }}>\n          <p style={{ float: \"right\" }}>\n            <a href=\"https://github.com/culturecreates/artsdata-widget\">\n              Source repository\n            </a>\n          </p>\n          <ul className=\"nav nav-tabs\">\n            <TabLink to=\"/\" title=\"LDFI Wikidata\" exact=\"true\" />\n            <TabLink to=\"/calendar/\" title=\"Calendar\"  exact=\"true\"/>\n          </ul>\n          <Route\n            exact\n            path=\"/\"\n            children={({ match }) => (\n              <TableTab style={{ display: match ? \"block\" : \"none\" }} />\n            )}\n          />\n           <Route\n            exact\n            path=\"/calendar/\"\n            children={({ match }) => (\n              <CalendarTab style={{ display: match ? \"block\" : \"none\" }} />\n            )}\n          />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}